Index: common/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/pom.xml b/common/pom.xml
--- a/common/pom.xml	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/common/pom.xml	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -14,6 +14,11 @@
 
     <dependencies>
         <dependency>
+            <groupId>io.jsonwebtoken</groupId>
+            <artifactId>jjwt</artifactId>
+            <version>0.12.5</version>
+        </dependency>
+        <dependency>
             <groupId>com.fasterxml.jackson.datatype</groupId>
             <artifactId>jackson-datatype-jsr310</artifactId>
         </dependency>
Index: common/src/main/java/com/linyilinyi/common/model/Result.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/src/main/java/com/linyilinyi/common/model/Result.java b/common/src/main/java/com/linyilinyi/common/model/Result.java
--- a/common/src/main/java/com/linyilinyi/common/model/Result.java	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/common/src/main/java/com/linyilinyi/common/model/Result.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -21,6 +21,11 @@
 
     public Result(){}
 
+    public Result(Integer code, String message) {
+        this.code = code;
+        this.message = message;
+    }
+
     // 返回数据
     protected static <T> Result<T> success(T data) {
         Result<T> result = new Result<T>();
Index: common/src/main/java/com/linyilinyi/common/model/ResultCodeEnum.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/src/main/java/com/linyilinyi/common/model/ResultCodeEnum.java b/common/src/main/java/com/linyilinyi/common/model/ResultCodeEnum.java
--- a/common/src/main/java/com/linyilinyi/common/model/ResultCodeEnum.java	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/common/src/main/java/com/linyilinyi/common/model/ResultCodeEnum.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -21,6 +21,7 @@
     SERVICE_ERROR(2012, "服务异常"),
     DATA_ERROR(204, "数据异常"),
     DATA_JSON_ERROR(204, "上传的json格式数据异常"),
+    JSON_PARSE_ERROR(204, "json解析失败"),
     DATA_NULL(204, "数据为空"),
     ILLEGAL_REQUEST(205, "非法请求"),
     REPEAT_SUBMIT(206, "重复提交"),
@@ -38,6 +39,7 @@
 
     LOGIN_AUTH(208, "未登陆"),
     PERMISSION(209, "没有权限"),
+    LOGIN_OTHER_TERMINAL(210, "账号已在其他地方登录"),
     ACCOUNT_ERROR(214, "账号不正确"),
     PASSWORD_ERROR(215, "密码不正确"),
     PASSWORDS_ERROR(215, "两次密码不相同"),
@@ -53,6 +55,7 @@
     COUPON_EXPIRE( 250, "优惠券已过期"),
     COUPON_LESS( 250, "优惠券库存不足"),
     COUPON_USER_LIMIT( 250, "超出领取数量"),
+    TOKEN_NULL(401, "token为空"),
     ;
 
     private Integer code;
Index: common/src/main/java/com/linyilinyi/common/utils/ResponseUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/src/main/java/com/linyilinyi/common/utils/ResponseUtil.java b/common/src/main/java/com/linyilinyi/common/utils/ResponseUtil.java
--- a/common/src/main/java/com/linyilinyi/common/utils/ResponseUtil.java	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/common/src/main/java/com/linyilinyi/common/utils/ResponseUtil.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -10,14 +10,29 @@
 
 public class ResponseUtil {
 
+    /**
+     * 将结果对象写入HTTP响应中
+     *
+     * 此方法用于将一个结果对象（Result）转换为JSON格式，并写入到HTTP响应中
+     * 它主要用于向客户端返回API调用的结果，包括状态码和响应体内容
+     *
+     * @param response HTTP响应对象，用于获取响应输出流并设置响应头信息
+     * @param r 结果对象，包含要返回给客户端的数据
+     */
     public static void out(HttpServletResponse response, Result r) {
+        // 创建ObjectMapper实例，用于将Java对象转换为JSON格式
         ObjectMapper mapper = new ObjectMapper();
+        // 设置HTTP响应状态码为200，表示请求成功
         response.setStatus(HttpStatus.OK.value());
+        // 设置响应内容类型为UTF-8编码的JSON格式
         response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);
+        // 获取响应输出流，并将结果对象转换为JSON格式后写入响应中
         try {
             mapper.writeValue(response.getWriter(), r);
         } catch (IOException e) {
+            // 如果在写入过程中发生IO异常，则打印异常堆栈跟踪信息
             e.printStackTrace();
         }
     }
+
 }
Index: common/src/main/java/com/linyilinyi/common/utils/ServletUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/src/main/java/com/linyilinyi/common/utils/ServletUtils.java b/common/src/main/java/com/linyilinyi/common/utils/ServletUtils.java
new file mode 100644
--- /dev/null	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
+++ b/common/src/main/java/com/linyilinyi/common/utils/ServletUtils.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -0,0 +1,96 @@
+package com.linyilinyi.common.utils;
+
+import com.alibaba.fastjson.JSON;
+import com.linyilinyi.common.model.Result;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
+import jakarta.servlet.http.HttpSession;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.MediaType;
+import org.springframework.web.context.request.RequestAttributes;
+import org.springframework.web.context.request.RequestContextHolder;
+import org.springframework.web.context.request.ServletRequestAttributes;
+
+import java.io.IOException;
+import java.util.Objects;
+
+/**
+ * <p>
+ * Servlet 工具类
+ * </p>
+ *
+ * @author Ya Shi
+ * @since 2024/1/4 14:29
+ */
+
+@Slf4j
+public class ServletUtils {
+
+    /**
+     * 获取Attributes
+     *
+     * @return ServletRequestAttributes
+     */
+    public static ServletRequestAttributes getRequestAttributes() {
+        RequestAttributes attributes = RequestContextHolder.getRequestAttributes();
+        if(Objects.isNull(attributes)){
+            log.error("ServletUtils 获取到的RequestAttributes为空");
+            throw new RuntimeException("ServletUtils 获取到的RequestAttributes为空");
+        }
+        return (ServletRequestAttributes) attributes;
+    }
+
+    /**
+     * 获取request
+     *
+     * @return HttpServletRequest
+     */
+    public static HttpServletRequest getRequest() {
+        return getRequestAttributes().getRequest();
+    }
+
+    /**
+     * 获取session
+     *
+     * @return HttpSession
+     */
+    public static HttpSession getSession() {
+        return getRequest().getSession();
+    }
+
+    /**
+     * 获取response
+     *
+     * @return HttpServletResponse
+     */
+    public static HttpServletResponse getResponse() {
+        return getRequestAttributes().getResponse();
+    }
+
+    /**
+     * 将字符串渲染到客户端
+     *
+     * @param response 渲染对象
+     * @param string   待渲染的字符串
+     */
+    public static void renderString(HttpServletResponse response, String string) {
+        try {
+            response.setContentType(MediaType.APPLICATION_JSON_VALUE);
+            response.setCharacterEncoding("utf-8");
+            response.getWriter().print(string);
+        } catch (IOException e) {
+            log.error("ServletUtils renderString 输出流写入异常：" + e);
+            throw new RuntimeException("输出流写入异常:"  + e);
+        }
+    }
+
+    /**
+     * 将BaseResult渲染到客户端
+     * @param response 渲染对象
+     * @param result BaseResult
+     */
+    public static void renderResult(HttpServletResponse response, Result<?> result) {
+        renderString(response, JSON.toJSONString(result));
+    }
+
+}
\ No newline at end of file
Index: common/src/main/java/com/linyilinyi/common/utils/TokenUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/src/main/java/com/linyilinyi/common/utils/TokenUtil.java b/common/src/main/java/com/linyilinyi/common/utils/TokenUtil.java
new file mode 100644
--- /dev/null	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
+++ b/common/src/main/java/com/linyilinyi/common/utils/TokenUtil.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -0,0 +1,164 @@
+package com.linyilinyi.common.utils;
+
+import io.jsonwebtoken.Claims;
+import io.jsonwebtoken.Jws;
+import io.jsonwebtoken.JwsHeader;
+import io.jsonwebtoken.Jwts;
+import io.jsonwebtoken.security.Keys;
+import io.jsonwebtoken.security.SecureDigestAlgorithm;
+
+import javax.crypto.SecretKey;
+import java.nio.charset.StandardCharsets;
+import java.time.Instant;
+import java.util.Date;
+import java.util.UUID;
+
+/**
+ * JWT Token工具类，用于生成和解析JWT Token
+ */
+public class TokenUtil {
+    /**
+     * 过期时间(单位:秒)
+     */
+    public static final int ACCESS_EXPIRE = 60 * 60 * 72;
+
+    /**
+     * 加密算法
+     */
+    private final static SecureDigestAlgorithm<SecretKey, SecretKey> ALGORITHM = Jwts.SIG.HS256;
+
+    /**
+     * 私钥 / 生成签名的时候使用的秘钥secret，一般可以从本地配置文件中读取。
+     * 切记：秘钥不能外露，在任何场景都不应该流露出去。
+     * 应该大于等于 256位(长度32及以上的字符串)，并且是随机的字符串
+     */
+    public final static String SECRET = "secrasdddddddddddddddddddddddddddddddddwqeqeqwewqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqetKey";
+
+    /**
+     * 秘钥实例
+     */
+    public static final SecretKey KEY = Keys.hmacShaKeyFor(SECRET.getBytes(StandardCharsets.UTF_8));
+
+    /**
+     * jwt签发者
+     */
+    private final static String JWT_ISS = "Tiam";
+
+    /**
+     * jwt主题
+     */
+    private final static String SUBJECT = "Peripherals";
+
+    /**
+     * 生成访问令牌
+     *
+     * @param username 用户名
+     * @return 访问令牌
+     */
+    public static String genAccessToken(String username) {
+        // 生成令牌ID
+        String uuid = UUID.randomUUID().toString();
+        // 设置过期时间
+        Date expireDate = Date.from(Instant.now().plusSeconds(ACCESS_EXPIRE));
+
+        return Jwts.builder()
+                // 设置头部信息
+                .header()
+                .add("typ", "JWT")
+                .add("alg", "HS256")
+                .and()
+                // 设置自定义负载信息
+                .claim("username", username)
+                .id(uuid) // 令牌ID
+                .expiration(expireDate) // 过期日期
+                .issuedAt(new Date()) // 签发时间
+                .subject(SUBJECT) // 主题
+                .issuer(JWT_ISS) // 签发者
+                .signWith(KEY, ALGORITHM) // 签名
+                .compact();
+    }
+
+
+
+    /**
+     * 获取payload中的用户信息
+     *
+     * @param token JWT Token
+     * @return 用户信息
+     */
+    public static String getUserFromToken(String token) {
+        String user = "";
+        Claims claims = parseClaims(token);
+        if (claims != null) {
+            user = (String) claims.get("username");
+        }
+        return user;
+    }
+
+    /**
+     * 获取JWT令牌的过期时间
+     *
+     * @param token JWT令牌
+     * @return 过期时间的毫秒级时间戳
+     */
+    public static long getExpirationTime(String token) {
+
+        Claims claims = parseClaims(token);
+        if (claims != null) {
+            return claims.getExpiration().getTime();
+        }
+        return 0L;
+    }
+    /**
+     * 解析token
+     *
+     * @param token token
+     * @return Jws<Claims>
+     */
+    public static Jws<Claims> parseClaim(String token) {
+        return Jwts.parser()
+                .verifyWith(KEY)
+                .build()
+                .parseSignedClaims(token);
+    }
+
+    /**
+     * 解析token的头部信息
+     *
+     * @param token token
+     * @return token的头部信息
+     */
+    public static JwsHeader parseHeader(String token) {
+        return parseClaim(token).getHeader();
+    }
+
+    /**
+     * 解析token的载荷信息
+     *
+     * @param token token
+     * @return token的载荷信息
+     */
+    public static Claims parsePayload(String token) {
+        return parseClaim(token).getPayload();
+    }
+
+
+    /**
+     * 解析JWT Token中的Claims
+     *
+     * @param token JWT Token
+     * @return Claims
+     */
+    public static Claims parseClaims(String token) {
+        try {
+            return Jwts.parser()
+                    .setSigningKey(KEY)
+                    .build()
+                    .parseClaimsJws(token)
+                    .getBody();
+        } catch (Exception e) {
+            return null;
+        }
+    }
+}
+
Index: gateway/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gateway/pom.xml b/gateway/pom.xml
--- a/gateway/pom.xml	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/gateway/pom.xml	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -20,66 +20,37 @@
     </properties>
 
     <dependencies>
+        <!-- httpClient依赖,缺少此依赖api网关转发请求时可能发生503错误 -->
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpclient</artifactId>
+        </dependency>
+        <!-- Sa-Token 权限认证（Reactor响应式集成）, 在线文档：https://sa-token.cc -->
+        <dependency>
+            <groupId>cn.dev33</groupId>
+            <artifactId>sa-token-reactor-spring-boot3-starter</artifactId>
+        </dependency>
+
+<!--        &lt;!&ndash; Sa-Token 整合 Redis （使用 jdk 默认序列化方式） &ndash;&gt;-->
 <!--        <dependency>-->
-<!--            <groupId>com.github.xiaoymin</groupId>-->
-<!--            <artifactId>knife4j-aggregation-spring-boot-starter</artifactId>-->
-<!--            <version>4.4.0</version>-->
-<!--        </dependency>-->
-<!--        <dependency>-->
-<!--            <groupId>com.github.xiaoymin</groupId>-->
-<!--            <artifactId>knife4j-gateway-spring-boot-starter</artifactId>-->
-<!--        </dependency>-->
-<!--        <dependency>-->
-<!--            <groupId>com.linyilinyi</groupId>-->
-<!--            <artifactId>common</artifactId>-->
-<!--            <version>1.0</version>-->
-<!--            <exclusions>-->
-<!--                <exclusion>-->
-<!--                    <groupId>org.springframework.cloud</groupId>-->
-<!--                    <artifactId>spring-cloud-starter-bus-amqp</artifactId>-->
-<!--                </exclusion>-->
-<!--                <exclusion>-->
-<!--                    <groupId>org.springframework.boot</groupId>-->
-<!--                    <artifactId>spring-boot-starter-web</artifactId>-->
-<!--                </exclusion>-->
-<!--            </exclusions>-->
+<!--            <groupId>cn.dev33</groupId>-->
+<!--            <artifactId>sa-token-redis</artifactId>-->
 <!--        </dependency>-->
 
-<!--        <dependency>-->
-<!--            <groupId>com.linyilinyi</groupId>-->
-<!--            <artifactId>model</artifactId>-->
-<!--            <version>1.0</version>-->
-<!--        </dependency>-->
-<!--        &lt;!&ndash;微服务gateway、feign、naocs的配置&ndash;&gt;-->
-<!--        <dependency>-->
-<!--            <groupId>org.springframework.cloud</groupId>-->
-<!--            <artifactId>spring-cloud-starter-gateway</artifactId>-->
-<!--        </dependency>-->
+        <dependency>
+            <groupId>com.github.xiaoymin</groupId>
+            <artifactId>knife4j-gateway-spring-boot-starter</artifactId>
+        </dependency>
 
-<!--        &lt;!&ndash; 服务调用feign &ndash;&gt;-->
-<!--        <dependency>-->
-<!--            <groupId>org.springframework.cloud</groupId>-->
-<!--            <artifactId>spring-cloud-starter-openfeign</artifactId>-->
-<!--        </dependency>-->
-<!--        <dependency>-->
-<!--            <groupId>org.springframework.cloud</groupId>-->
-<!--            <artifactId>spring-cloud-starter-loadbalancer</artifactId>-->
-<!--        </dependency>-->
-<!--        <dependency>-->
-<!--            <groupId>com.alibaba.boot</groupId>-->
-<!--            <artifactId>nacos-config-spring-boot-starter</artifactId>-->
-<!--            <version>0.2.12</version>-->
-<!--        </dependency>-->
-<!--        <dependency>-->
-<!--            <groupId>org.springframework.cloud</groupId>-->
-<!--            <artifactId>spring-cloud-starter</artifactId>-->
-<!--        </dependency>-->
-
-<!--        &lt;!&ndash; 服务注册 &ndash;&gt;-->
-<!--        <dependency>-->
-<!--            <groupId>com.alibaba.cloud</groupId>-->
-<!--            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>-->
-<!--        </dependency>-->
+        <!-- 服务调用feign -->
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-openfeign</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-loadbalancer</artifactId>
+        </dependency>
 
         <!-- Spring Cloud Alibaba Nacos Config -->
         <dependency>
@@ -91,7 +62,7 @@
             <groupId>org.springframework.cloud</groupId>
             <artifactId>spring-cloud-starter-bootstrap</artifactId>
         </dependency>
-<!--         对外提供Gateway应用监控指标-->
+        <!--         对外提供Gateway应用监控指标-->
         <dependency>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-actuator</artifactId>
@@ -111,6 +82,17 @@
             <groupId>org.springframework.cloud</groupId>
             <artifactId>spring-cloud-starter-loadbalancer</artifactId>
         </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <scope>provided</scope>
+        </dependency>
+        <!--        <dependency>-->
+        <!--            <groupId>io.springfox</groupId>-->
+        <!--            <artifactId>springfox-swagger-common</artifactId>-->
+        <!--            <version>3.0.0</version>-->
+        <!--            <scope>compile</scope>-->
+        <!--        </dependency>-->
     </dependencies>
 
 
Index: gateway/src/main/java/com/linyilinyi/gateway/GatewayApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gateway/src/main/java/com/linyilinyi/gateway/GatewayApplication.java b/gateway/src/main/java/com/linyilinyi/gateway/GatewayApplication.java
--- a/gateway/src/main/java/com/linyilinyi/gateway/GatewayApplication.java	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/gateway/src/main/java/com/linyilinyi/gateway/GatewayApplication.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -3,6 +3,7 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
+import org.springframework.cloud.openfeign.EnableFeignClients;
 import org.springframework.context.annotation.Bean;
 
 /**
@@ -12,7 +13,7 @@
  * @ClassName: GatewayApplication
  */
 @SpringBootApplication
-//@EnableFeignClients
+@EnableFeignClients("com.linyilinyi")
 @EnableDiscoveryClient
 public class GatewayApplication {
 
Index: gateway/src/main/java/com/linyilinyi/gateway/config/SaTokenConfigure.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gateway/src/main/java/com/linyilinyi/gateway/config/SaTokenConfigure.java b/gateway/src/main/java/com/linyilinyi/gateway/config/SaTokenConfigure.java
new file mode 100644
--- /dev/null	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
+++ b/gateway/src/main/java/com/linyilinyi/gateway/config/SaTokenConfigure.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -0,0 +1,94 @@
+package com.linyilinyi.gateway.config;
+
+import cn.dev33.satoken.context.SaHolder;
+import cn.dev33.satoken.reactor.filter.SaReactorFilter;
+import cn.dev33.satoken.router.SaHttpMethod;
+import cn.dev33.satoken.router.SaRouter;
+import cn.dev33.satoken.stp.StpUtil;
+import cn.dev33.satoken.util.SaResult;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.ObjectProvider;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.http.HttpMessageConverters;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.http.converter.HttpMessageConverter;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Collectors;
+
+/**
+ * @Description 注册 Sa-Token全局过滤器
+ * @Author linyi
+ * @Date 2024/9/13
+ * @ClassName: SaTokenConfigure
+ */
+@Slf4j
+@Configuration
+public class SaTokenConfigure {
+
+    @Bean
+    public SaReactorFilter getSaReactorFilter() {
+        return new SaReactorFilter()
+                // 拦截地址
+                .addInclude("/**")    /* 拦截全部path */
+                // 开放地址
+                .addExclude("/favicon.ico")
+                .addExclude("/user/login")
+                .addExclude("/user/doLogin")
+                .addExclude("/user/register")
+                .addExclude("/user/logout")
+                .addExclude("/user/getUserPermissions")
+                //swagger和knife4j
+                .addExclude("/swagger-ui/**")
+                .addExclude("/swagger-resources/**")
+                .addExclude("/v3/**")
+                .addExclude("/webjars/**")
+                .addExclude("/doc.html")
+                //gateway聚合API接口文档
+                .addExclude("/lyly/**")
+
+                // 鉴权方法：每次访问进入
+                .setAuth(obj -> {
+                    // 登录校验 -- 拦截所有路由，并排除/user/doLogin 用于开放登录
+                    SaRouter.match("/**", "/user/doLogin", r -> StpUtil.checkLogin());
+
+                    // 权限认证 -- 不同模块, 校验不同权限
+                    SaRouter.match("/**/*", r -> StpUtil.checkPermission("admin"));
+                    SaRouter.match("/user/**", r -> StpUtil.checkPermission("user"));
+                })
+                // 异常处理方法：每次setAuth函数出现异常时进入
+                .setError(e -> {
+                    return SaResult.error(e.getMessage());
+                })
+                .setBeforeAuth(r -> {
+                    // ---------- 设置一些安全响应头 ----------
+                    SaHolder.getResponse()
+                            // 允许指定域访问跨域资源
+                            .setHeader("Access-Control-Allow-Origin", "*")
+                            // 允许所有请求方式
+                            .setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS, DELETE, PUT")
+                            // 有效时间
+                            .setHeader("Access-Control-Max-Age", "3600")
+                            // 允许的header参数
+                            .setHeader("Access-Control-Allow-Headers", "*")
+                    ;
+                    // 如果是预检请求，则立即返回到前端
+                    SaRouter.match(SaHttpMethod.OPTIONS)
+                            .free(s -> log.info("*******OPTIONS预检请求，不做处理"))
+                            .back();
+                });
+    }
+
+    /**
+     * 由于网关没有引入springMVC依赖，所以使用feign的时候需要手动装配messageConverters
+     * @param converters
+     * @return
+     */
+    @Bean
+    @ConditionalOnMissingBean
+    public HttpMessageConverters messageConverters(ObjectProvider<HttpMessageConverter<?>> converters) {
+        return new HttpMessageConverters(converters.orderedStream().collect(Collectors.toList()));
+    }
+}
Index: gateway/src/main/java/com/linyilinyi/gateway/config/StpInterfaceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gateway/src/main/java/com/linyilinyi/gateway/config/StpInterfaceImpl.java b/gateway/src/main/java/com/linyilinyi/gateway/config/StpInterfaceImpl.java
new file mode 100644
--- /dev/null	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
+++ b/gateway/src/main/java/com/linyilinyi/gateway/config/StpInterfaceImpl.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -0,0 +1,46 @@
+package com.linyilinyi.gateway.config;
+
+import cn.dev33.satoken.stp.StpInterface;
+import org.springframework.stereotype.Component;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * @Description 自定义权限加载接口实现类
+ * @Author linyi
+ * @Date 2024/9/13
+ * @ClassName: StpInterfaceImpl
+ */
+@Component
+public class StpInterfaceImpl implements StpInterface {
+
+    /**
+     * 返回一个账号所拥有的权限码集合 
+     */
+    @Override
+    public List<String> getPermissionList(Object loginId, String loginType) {
+        // 本 list 仅做模拟，实际项目中要根据具体业务逻辑来查询权限
+        List<String> list = new ArrayList<String>();
+        list.add("101");
+        list.add("user.add");
+        list.add("user.update");
+        list.add("user.get");
+        // list.add("user.delete");
+        list.add("art.*");
+        return list;
+    }
+
+    /**
+     * 返回一个账号所拥有的角色标识集合 (权限与角色可分开校验)
+     */
+    @Override
+    public List<String> getRoleList(Object loginId, String loginType) {
+        // 本 list 仅做模拟，实际项目中要根据具体业务逻辑来查询角色
+        List<String> list = new ArrayList<String>();    
+        list.add("admin");
+        list.add("super-admin");
+        return list;
+    }
+
+}
Index: gateway/src/main/resources/bootstrap.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gateway/src/main/resources/bootstrap.yml b/gateway/src/main/resources/bootstrap.yml
--- a/gateway/src/main/resources/bootstrap.yml	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/gateway/src/main/resources/bootstrap.yml	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -38,27 +38,13 @@
     web:
       exposure:
         include: '*' #对外暴露actuator所有监控指标，便于监控系统收集跟踪
+# knife4j 网关聚合
 knife4j:
   gateway:
     enabled: true
-    # 指定服务发现的模式聚合微服务文档，并且是默认`default`分组
+    # 指定服务发现的模式聚合微服务文档，并且是默认 default 分组
     strategy: discover
     discover:
-      enabled: true
-      # 指定版本号(Swagger2|OpenAPI3)
-      version : openapi3
-      # 需要排除的微服务(eg:网关服务)
-#      excluded-services: ${spring.application.name}
-      service-config:
-        service-video:
-          - group-name: "视频服务"
-            order: 1
-        service-user:
-          - group-name: "用户服务"
-            order: 2
-        service-article:
-          - group-name: "视频服务"
-            order: 3
-        tags-sorter: order
-        operations-sorter: order
-
+      # OpenAPI 3.0 规范
+      version: openapi3
+      enabled: true
Index: model/src/main/java/com/linyilinyi/model/entity/user/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/src/main/java/com/linyilinyi/model/entity/user/User.java b/model/src/main/java/com/linyilinyi/model/entity/user/User.java
--- a/model/src/main/java/com/linyilinyi/model/entity/user/User.java	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/model/src/main/java/com/linyilinyi/model/entity/user/User.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -1,20 +1,17 @@
 package com.linyilinyi.model.entity.user;
 
-import com.baomidou.mybatisplus.annotation.IdType;
-import com.baomidou.mybatisplus.annotation.TableId;
+import com.baomidou.mybatisplus.annotation.*;
 
 import java.time.LocalDateTime;
 
-import com.baomidou.mybatisplus.annotation.TableLogic;
-
 import java.io.Serializable;
+import java.util.List;
 
 import com.fasterxml.jackson.annotation.JsonFormat;
 import io.swagger.v3.oas.annotations.media.Schema;
 import lombok.Data;
 import lombok.AllArgsConstructor;
 import lombok.NoArgsConstructor;
-import com.baomidou.mybatisplus.annotation.TableName;
 
 /**
  * <p>
@@ -75,5 +72,9 @@
     @TableLogic
     private Integer isDelete;
 
+    @TableField(exist = false)
+    @Schema(description = "用户权限列表")
+    private List<String> userPermsList;
+
 
 }
Index: model/src/main/java/com/linyilinyi/model/vo/code/Code.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/src/main/java/com/linyilinyi/model/vo/code/Code.java b/model/src/main/java/com/linyilinyi/model/vo/code/Code.java
new file mode 100644
--- /dev/null	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
+++ b/model/src/main/java/com/linyilinyi/model/vo/code/Code.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -0,0 +1,20 @@
+package com.linyilinyi.model.vo.code;
+
+import io.swagger.v3.oas.annotations.media.Schema;
+import lombok.Data;
+
+/**
+ * @Description
+ * @Author linyi
+ * @Date 2024/9/29
+ * @ClassName: Code
+ */
+@Data
+public class Code {
+
+    @Schema(description = "状态码")
+    private Integer code;
+
+    @Schema(description = "键")
+    private String codeKey;
+}
Index: model/src/main/java/com/linyilinyi/model/vo/user/LoginVo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/src/main/java/com/linyilinyi/model/vo/user/LoginVo.java b/model/src/main/java/com/linyilinyi/model/vo/user/LoginVo.java
new file mode 100644
--- /dev/null	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
+++ b/model/src/main/java/com/linyilinyi/model/vo/user/LoginVo.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -0,0 +1,21 @@
+package com.linyilinyi.model.vo.user;
+
+import com.linyilinyi.model.vo.code.Code;
+import io.swagger.v3.oas.annotations.media.Schema;
+import lombok.Data;
+
+/**
+ * @Description
+ * @Author linyi
+ * @Date 2024/9/29
+ * @ClassName: LoginVo
+ */
+@Data
+public class LoginVo /*extends Code*/ {
+
+    @Schema(description = "用户名")
+    private String username;
+
+    @Schema(description = "密码")
+    private String password;
+}
Index: model/src/main/java/com/linyilinyi/model/vo/user/PasswordUpdateVo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/src/main/java/com/linyilinyi/model/vo/user/PasswordUpdateVo.java b/model/src/main/java/com/linyilinyi/model/vo/user/PasswordUpdateVo.java
new file mode 100644
--- /dev/null	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
+++ b/model/src/main/java/com/linyilinyi/model/vo/user/PasswordUpdateVo.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -0,0 +1,27 @@
+package com.linyilinyi.model.vo.user;
+
+import io.swagger.v3.oas.annotations.media.Schema;
+import jakarta.validation.constraints.NotBlank;
+import lombok.Data;
+
+/**
+ * @Description
+ * @Author linyi
+ * @Date 2024/9/29
+ * @ClassName: PasswordUpdateVo
+ */
+@Data
+public class PasswordUpdateVo {
+
+    @NotBlank(message = "密码不能为空")
+    @Schema(description = "密码")
+    private String password;
+
+    @NotBlank(message = "新密码不能为空")
+    @Schema(description = "新密码")
+    private String newPassword;
+
+    @NotBlank(message = "确认密码不能为空")
+    @Schema(description = "确认密码")
+    private String confirmPassword;
+}
Index: model/src/main/java/com/linyilinyi/model/vo/user/Register.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/src/main/java/com/linyilinyi/model/vo/user/Register.java b/model/src/main/java/com/linyilinyi/model/vo/user/Register.java
new file mode 100644
--- /dev/null	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
+++ b/model/src/main/java/com/linyilinyi/model/vo/user/Register.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -0,0 +1,36 @@
+package com.linyilinyi.model.vo.user;
+
+import com.linyilinyi.model.vo.code.Code;
+import io.swagger.v3.oas.annotations.media.Schema;
+import jakarta.validation.constraints.NotBlank;
+import lombok.Data;
+
+/**
+ * @Description
+ * @Author linyi
+ * @Date 2024/9/29
+ * @ClassName: Register
+ */
+@Data
+public class Register extends Code {
+
+    @NotBlank(message = "用户名不能为空")
+    @Schema(description = "用户名")
+    private String username;
+
+    @NotBlank(message = "密码不能为空")
+    @Schema(description = "密码")
+    private String password;
+
+    @NotBlank(message = "确认密码不能为空")
+    @Schema(description = "确认密码")
+    private String confirmPassword;
+
+    @NotBlank(message = "邮箱不能为空")
+    @Schema(description = "邮箱")
+    private String email;
+
+    @Schema(description = "头像")
+    private String image;
+
+}
Index: mybatis-plus-generator/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mybatis-plus-generator/pom.xml b/mybatis-plus-generator/pom.xml
--- a/mybatis-plus-generator/pom.xml	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/mybatis-plus-generator/pom.xml	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -83,5 +83,5 @@
         </dependency>
 
 
-    </dependencies>
+    </dependencies><build><plugins><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-compiler-plugin</artifactId><configuration><source>15</source><target>15</target></configuration></plugin></plugins></build>
 </project>
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/pom.xml	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -22,6 +22,7 @@
         <module>model</module>
         <module>gateway</module>
         <module>service-client</module>
+
     </modules>
 
     <properties>
@@ -61,11 +62,66 @@
         <springdoc-openapi-starter-common>2.3.0</springdoc-openapi-starter-common>
         <spring-boot-starter-cache>3.2.0</spring-boot-starter-cache>
         <jackson-datatype-jsr310>2.13.0</jackson-datatype-jsr310>
+        <spring-cloud-starter-oauth2>2.2.5.RELEASE</spring-cloud-starter-oauth2>
+        <jjwt.version>0.12.5</jjwt.version>
+        <javax.servlet-api>4.0.1</javax.servlet-api>
+        <java-jwt.version>4.0.0</java-jwt.version>
+        <jedis.version>5.1.0</jedis.version>
+        <sa-token-redis>1.39.0</sa-token-redis>
+        <sa-token-spring-boot3-starter>1.39.0</sa-token-spring-boot3-starter>
+        <sa-token-reactor-spring-boot3-starter>1.39.0</sa-token-reactor-spring-boot3-starter>
+        <httpclient.version>4.5.13</httpclient.version>
     </properties>
 
     <!--配置dependencyManagement锁定依赖的版本-->
     <dependencyManagement>
         <dependencies>
+            <!-- httpClient依赖,缺少此依赖api网关转发请求时可能发生503错误 -->
+            <dependency>
+                <groupId>org.apache.httpcomponents</groupId>
+                <artifactId>httpclient</artifactId>
+                <version>${httpclient.version}</version>
+            </dependency>
+            <!--getaway中 Sa-Token 权限认证（Reactor响应式集成 -->
+            <dependency>
+                <groupId>cn.dev33</groupId>
+                <artifactId>sa-token-reactor-spring-boot3-starter</artifactId>
+                <version>${sa-token-reactor-spring-boot3-starter}</version>
+            </dependency>
+            <!-- jedis-->
+            <dependency>
+                <groupId>redis.clients</groupId>
+                <artifactId>jedis</artifactId>
+                <version>${jedis.version}</version>
+            </dependency>
+            <!-- Sa-Token 整合 Redis （使用 jdk 默认序列化方式） -->
+            <dependency>
+                <groupId>cn.dev33</groupId>
+                <artifactId>sa-token-redis</artifactId>
+                <version>${sa-token-redis}</version>
+            </dependency>
+            <!-- Sa-Token 权限认证，在线文档：https://sa-token.cc -->
+            <dependency>
+                <groupId>cn.dev33</groupId>
+                <artifactId>sa-token-spring-boot3-starter</artifactId>
+                <version>${sa-token-spring-boot3-starter}</version>
+            </dependency>
+            <dependency>
+                <groupId>com.auth0</groupId>
+                <artifactId>java-jwt</artifactId>
+                <version>${java-jwt.version}</version>
+            </dependency>
+            <dependency>
+                <groupId>javax.servlet</groupId>
+                <artifactId>javax.servlet-api</artifactId>
+                <version>4.0.1</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.springframework.cloud</groupId>
+                <artifactId>spring-cloud-starter-oauth2</artifactId>
+                <version>${spring-cloud-starter-oauth2}</version>
+            </dependency>
             <dependency>
                 <groupId>com.fasterxml.jackson.datatype</groupId>
                 <artifactId>jackson-datatype-jsr310</artifactId>
@@ -107,7 +163,7 @@
             <dependency>
                 <groupId>cn.hutool</groupId>
                 <artifactId>hutool-all</artifactId>
-                <version>5.8.27</version>
+                <version>${hutool-all.version}</version>
             </dependency>
             <!-- Spring Boot Starter for Elasticsearch -->
             <dependency>
Index: service-client/service-user-client/src/main/java/com/linyilinyi/user/client/UserClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/service-client/service-user-client/src/main/java/com/linyilinyi/user/client/UserClient.java b/service-client/service-user-client/src/main/java/com/linyilinyi/user/client/UserClient.java
--- a/service-client/service-user-client/src/main/java/com/linyilinyi/user/client/UserClient.java	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/service-client/service-user-client/src/main/java/com/linyilinyi/user/client/UserClient.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -2,10 +2,12 @@
 
 import com.linyilinyi.common.model.Result;
 import com.linyilinyi.model.entity.user.User;
+import com.linyilinyi.model.vo.user.LoginVo;
 import jakarta.validation.Valid;
 import org.springframework.cloud.openfeign.FeignClient;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
 
 /**
  * @Description
@@ -18,4 +20,15 @@
 
     @GetMapping("/user/getUserById/{id}")
     public Result<User> getUserById(@PathVariable Integer id);
+
+    @GetMapping("/user/getByUsername/{username}")
+    public Result<User> getByUsername(@PathVariable String username);
+
+    @PostMapping("/user/login")
+    public Result<String> login(@RequestBody LoginVo loginVo);
+
+    @GetMapping("/user/getUserPermissions")
+    public Result<List<String>> getUserPermissions(@RequestParam String username);
+
+
 }
Index: service/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/service/pom.xml b/service/pom.xml
--- a/service/pom.xml	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/service/pom.xml	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -22,7 +22,6 @@
         <module>service-user</module>
         <module>service-video</module>
         <module>service-article</module>
-        <module>service-auth</module>
     </modules>
     <dependencies>
         <dependency>
Index: service/service-user/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/service/service-user/pom.xml b/service/service-user/pom.xml
--- a/service/service-user/pom.xml	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/service/service-user/pom.xml	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -20,6 +20,21 @@
     </properties>
 
     <dependencies>
+        <!-- jedis-->
+        <dependency>
+            <groupId>redis.clients</groupId>
+            <artifactId>jedis</artifactId>
+        </dependency>
+        <!-- Sa-Token 整合 Redis （使用 jdk 默认序列化方式） -->
+        <dependency>
+            <groupId>cn.dev33</groupId>
+            <artifactId>sa-token-redis</artifactId>
+        </dependency>
+        <!-- Sa-Token 权限认证，在线文档：https://sa-token.cc -->
+        <dependency>
+            <groupId>cn.dev33</groupId>
+            <artifactId>sa-token-spring-boot3-starter</artifactId>
+        </dependency>
     </dependencies>
 
     <build>
Index: service/service-user/src/main/java/com/linyilinyi/user/UserApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/service/service-user/src/main/java/com/linyilinyi/user/UserApplication.java b/service/service-user/src/main/java/com/linyilinyi/user/UserApplication.java
--- a/service/service-user/src/main/java/com/linyilinyi/user/UserApplication.java	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/service/service-user/src/main/java/com/linyilinyi/user/UserApplication.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -1,5 +1,6 @@
 package com.linyilinyi.user;
 
+import cn.dev33.satoken.SaManager;
 import org.mybatis.spring.annotation.MapperScan;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
Index: service/service-user/src/main/java/com/linyilinyi/user/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/service/service-user/src/main/java/com/linyilinyi/user/controller/UserController.java b/service/service-user/src/main/java/com/linyilinyi/user/controller/UserController.java
--- a/service/service-user/src/main/java/com/linyilinyi/user/controller/UserController.java	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/service/service-user/src/main/java/com/linyilinyi/user/controller/UserController.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -1,8 +1,11 @@
 package com.linyilinyi.user.controller;
 
+import cn.dev33.satoken.stp.StpUtil;
+import cn.dev33.satoken.util.SaResult;
 import com.linyilinyi.common.model.PageResult;
 import com.linyilinyi.common.model.Result;
 import com.linyilinyi.model.entity.user.User;
+import com.linyilinyi.model.vo.user.LoginVo;
 import com.linyilinyi.model.vo.user.UserAddVo;
 import com.linyilinyi.model.vo.user.UserQueryVo;
 import com.linyilinyi.model.vo.user.UserUpdateVo;
@@ -11,11 +14,13 @@
 import io.swagger.v3.oas.annotations.tags.Tag;
 import jakarta.annotation.Resource;
 import jakarta.validation.Valid;
+import jakarta.validation.constraints.NotBlank;
+import lombok.extern.slf4j.Slf4j;
 import org.springframework.validation.annotation.Validated;
 import org.springframework.web.bind.annotation.*;
 
 import java.util.List;
-
+@Slf4j
 @RestController
 @Tag(name = "用户管理接口")
 @RequestMapping("user")
@@ -56,4 +61,49 @@
                                                      @RequestBody UserQueryVo userQueryVo){
         return Result.ok(userService.getUserList(pageNo,pageSize,userQueryVo));
     }
+    @Operation(summary = "根据用户名查询用户信息")
+    @GetMapping("/getByUsername/{username}")
+    public Result<User> getByUsername(@NotBlank(message = "账号不能为空") @PathVariable String username){
+        return Result.ok(userService.getByUsername(username));
+    }
+
+    @Operation(summary = "用户登录（成功返回token）")
+    @PostMapping("/login")
+    public Result<String> login(@RequestBody LoginVo loginVo){
+        log.info("登录请求：{}",loginVo);
+        return Result.ok(userService.login(loginVo));
+    }
+
+    @Operation(summary = "用户注册")
+    @PostMapping("/register")
+    public Result<String> register(@RequestBody UserAddVo userAddVo){
+        return null;
+    }
+
+    @Operation(summary = "获取用户权限")
+    @GetMapping("/getUserPermissions")
+    public Result<List<String>> getUserPermissions(@RequestParam String username){
+        return null;
+    }
+
+    @Operation(summary = "查询登录状态(登录：true，未登录：false)")
+    @GetMapping("/isLogin")
+    public Result<Boolean> isLogin() {
+        log.info("是否登录：{}",StpUtil.isLogin());
+        boolean b = StpUtil.isLogin() ? true : false;
+        return Result.ok(b);
+    }
+
+    @Operation(summary = "获取token信息")
+    @GetMapping("/getToken")
+    public Result<String> tokenInfo() {
+        return Result.ok(StpUtil.getTokenValue());
+    }
+
+    @Operation(summary = "用户登出")
+    @PostMapping("/logout")
+    public Result<String> logout() {
+        StpUtil.logout();
+        return Result.ok("退出成功");
+    }
 }
\ No newline at end of file
Index: service/service-user/src/main/java/com/linyilinyi/user/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/service/service-user/src/main/java/com/linyilinyi/user/service/UserService.java b/service/service-user/src/main/java/com/linyilinyi/user/service/UserService.java
--- a/service/service-user/src/main/java/com/linyilinyi/user/service/UserService.java	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/service/service-user/src/main/java/com/linyilinyi/user/service/UserService.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -3,6 +3,7 @@
 import com.baomidou.mybatisplus.extension.service.IService;
 import com.linyilinyi.common.model.PageResult;
 import com.linyilinyi.model.entity.user.User;
+import com.linyilinyi.model.vo.user.LoginVo;
 import com.linyilinyi.model.vo.user.UserAddVo;
 import com.linyilinyi.model.vo.user.UserQueryVo;
 import com.linyilinyi.model.vo.user.UserUpdateVo;
@@ -28,4 +29,8 @@
     String updateUser(UserUpdateVo user);
 
     String addUser(UserAddVo userAddVo);
+
+    User getByUsername(String username);
+
+    String login(LoginVo loginVo);
 }
Index: service/service-user/src/main/java/com/linyilinyi/user/service/impl/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/service/service-user/src/main/java/com/linyilinyi/user/service/impl/UserServiceImpl.java b/service/service-user/src/main/java/com/linyilinyi/user/service/impl/UserServiceImpl.java
--- a/service/service-user/src/main/java/com/linyilinyi/user/service/impl/UserServiceImpl.java	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ b/service/service-user/src/main/java/com/linyilinyi/user/service/impl/UserServiceImpl.java	(revision c58371cdd0e0aa5080c47bcd19f241a912f010ef)
@@ -1,6 +1,7 @@
 package com.linyilinyi.user.service.impl;
 
 import ch.qos.logback.core.testUtil.RandomUtil;
+import cn.dev33.satoken.stp.StpUtil;
 import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
@@ -9,6 +10,7 @@
 import com.linyilinyi.common.model.ResultCodeEnum;
 import com.linyilinyi.common.utils.PasswordEncoder;
 import com.linyilinyi.model.entity.user.User;
+import com.linyilinyi.model.vo.user.LoginVo;
 import com.linyilinyi.model.vo.user.UserAddVo;
 import com.linyilinyi.model.vo.user.UserQueryVo;
 import com.linyilinyi.model.vo.user.UserUpdateVo;
@@ -109,5 +111,29 @@
         }
         return "添加成功";
 
+    }
+
+    @Override
+    public User getByUsername(String username) {
+        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<User>().eq(User::getUsername,username);
+        return userMapper.selectOne(queryWrapper);
+    }
+
+    @Override
+    public String login(LoginVo loginVo) {
+        String username = loginVo.getUsername();
+        User byUsername = getByUsername(username);
+        if (byUsername == null){
+            throw new LinyiException(ResultCodeEnum.ACCOUNT_NULL);
+        }
+
+        if(PasswordEncoder.encode(loginVo.getPassword(), byUsername.getPassword(),byUsername.getSalt())){
+            //satoken登录
+            StpUtil.login(byUsername.getId());
+            //获取登录信息
+            String tokenValue = StpUtil.getTokenValue();
+            return tokenValue;
+        }
+        throw new LinyiException(ResultCodeEnum.PASSWORD_ERROR);
     }
 }
Index: service/service-auth/pom.xml
===================================================================
diff --git a/service/service-auth/pom.xml b/service/service-auth/pom.xml
deleted file mode 100644
--- a/service/service-auth/pom.xml	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ /dev/null	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-    <parent>
-        <groupId>com.linyilinyi</groupId>
-        <artifactId>service</artifactId>
-        <version>1.0</version>
-    </parent>
-
-    <artifactId>service-auth</artifactId>
-    <version>1.0</version>
-    <packaging>jar</packaging>
-
-    <properties>
-        <maven.compiler.source>17</maven.compiler.source>
-        <maven.compiler.target>17</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
-
-    <build>
-        <finalName>${project.artifactId}</finalName>
-        <plugins>
-            <plugin>
-                <groupId>org.springframework.boot</groupId>
-                <artifactId>spring-boot-maven-plugin</artifactId>
-            </plugin>
-        </plugins>
-    </build>
-
-</project>
\ No newline at end of file
Index: service/service-auth/src/main/java/com/linyilinyi/auth/AuthApplication.java
===================================================================
diff --git a/service/service-auth/src/main/java/com/linyilinyi/auth/AuthApplication.java b/service/service-auth/src/main/java/com/linyilinyi/auth/AuthApplication.java
deleted file mode 100644
--- a/service/service-auth/src/main/java/com/linyilinyi/auth/AuthApplication.java	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
+++ /dev/null	(revision c798997e223ac4d42603f40014df1e20510a2ceb)
@@ -1,25 +0,0 @@
-package com.linyilinyi.auth;
-
-import org.mybatis.spring.annotation.MapperScan;
-import org.springframework.boot.SpringApplication;
-import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
-import org.springframework.cloud.openfeign.EnableFeignClients;
-
-/**
- * @Description
- * @Author linyi
- * @Date 2024/9/28
- * @ClassName: AuthApplication
- */
-
-
-@SpringBootApplication(scanBasePackages = {"com.linyilinyi.common.exception", "com.linyilinyi.common.config","com.linyilinyi.auth"})
-@EnableDiscoveryClient
-@EnableFeignClients("com.linyilinyi")
-public class AuthApplication {
-    public static void main(String[] args) {
-
-        SpringApplication.run(AuthApplication.class, args);
-    }
-}
